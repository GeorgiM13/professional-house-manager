import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "./supabaseClient";
import "./styles/EditProfile.css";

function EditProfile() {
  const navigate = useNavigate();

  const [savedUser, setSavedUser] = useState(() => {
    return JSON.parse(localStorage.getItem("user")) || {};
  });
  const [userData, setUserData] = useState(null);
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");

  useEffect(() => {
    async function restoreSession() {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (!session) {
        const {
          data: { user },
          error,
        } = await supabase.auth.getUser();
        if (error || !user) {
          console.warn(
            "–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å–∏—è ‚Äî –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –ª–æ–≥–Ω–µ –æ—Ç–Ω–æ–≤–æ."
          );
        }
      }
    }
    restoreSession();
  }, []);

  useEffect(() => {
    async function fetchUserData() {
      if (!savedUser?.id) return;
      localStorage.removeItem(`userData_${savedUser.id}`); // üßπ

      const { data, error } = await supabase
        .from("users")
        .select("*")
        .eq("id", savedUser.id)
        .single();

      if (!error && data) {
        setUserData(data);
        setUsername(data.username || "");
        setEmail(data.email || "");
        setPhone(data.phone || "");
        localStorage.setItem(`userData_${savedUser.id}`, JSON.stringify(data));
      }
    }

    fetchUserData();
  }, [savedUser]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (password && password !== confirmPassword) {
      setMessage("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç.");
      return;
    }

    const updates = {};

    if (password) {
      const { error: passError } = await supabase.auth.updateUser({ password });
      if (passError) {
        setMessage("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞!");
        console.error(passError);
        return;
      }
      updates.password_hash = password;
    }

    if (email && email !== userData.email) {
      const { error: emailError } = await supabase.auth.updateUser({ email });
      if (emailError) {
        console.error("Auth email update error:", emailError);
        setMessage("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –∏–º–µ–π–ª–∞ –≤ Auth!");
        return;
      }

      updates.email = email;
      setMessage(
        "üì© –ò–∑–ø—Ä–∞—Ç–µ–Ω –µ –∏–º–µ–π–ª –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ. –ú–æ–ª—è, –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –Ω–æ–≤–∏—è –∞–¥—Ä–µ—Å, –∑–∞ –¥–∞ –≤–ª–µ–∑–µ—Ç–µ —Å –Ω–µ–≥–æ."
      );
    }

    if (username !== userData.username) updates.username = username;
    if (phone !== userData.phone) updates.phone = phone;

    if (Object.keys(updates).length === 0) {
      setMessage("–ù—è–º–∞ –ø—Ä–æ–º–µ–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å–≤–∞–Ω–µ.");
      return;
    }

    const { error: dbError } = await supabase
      .from("users")
      .update(updates)
      .eq("id", savedUser.id);

    if (dbError) {
      console.error("Supabase update error:", dbError);
      setMessage("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏!");
      return;
    }

    const updatedUser = { ...savedUser, ...updates };
    localStorage.setItem("user", JSON.stringify(updatedUser));
    localStorage.setItem(
      `userData_${savedUser.id}`,
      JSON.stringify({ ...userData, ...updates })
    );

    if (email && email !== userData.email) {
      setMessage(
        "üìß –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ø–æ—â–∞—Ç–∞ —Å–∏ –∏ –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ –Ω–æ–≤–∏—è –∏–º–µ–π–ª."
      );
      return;
    }

    setMessage("‚úÖ –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–µ–Ω–∏!");
    setTimeout(() => navigate(-1), 2000);
  };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="edit-profile-container">
      <h2>–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω–∏</h2>
      <form onSubmit={handleSubmit} className="edit-profile-form">
        <label>
          –¢—Ä–∏ –∏–º–µ–Ω–∞:
          <input
            type="text"
            value={`${userData?.first_name || ""} ${
              userData?.second_name || ""
            } ${userData?.last_name || ""}`}
            readOnly
          />
        </label>

        <label>
          –ò–º–µ–π–ª:
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </label>

        <label>
          –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ:
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
        </label>

        <label>
          –¢–µ–ª–µ—Ñ–æ–Ω:
          <input
            type="tel"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
        </label>

        <label>
          –ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞:
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </label>

        <label>
          –ü–æ—Ç–≤—ä—Ä–¥–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞:
          <input
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
          />
        </label>

        <div className="form-actions">
          <button type="submit" className="save-button">
            –ó–∞–ø–∞–∑–∏
          </button>
          <button
            type="button"
            className="cancel-button"
            onClick={handleCancel}
          >
            –û—Ç–∫–∞–∑
          </button>
        </div>
      </form>

      {message && <p className="success-message">{message}</p>}
    </div>
  );
}

export default EditProfile;
