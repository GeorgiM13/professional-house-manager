import fs from "fs";
import { Document, Packer, Paragraph, Table, TableRow, TableCell } from "docx";

async function exportDoc() {
  const csvPath = "tools/import/output/users_preview.csv";
  if (!fs.existsSync(csvPath)) {
    console.error("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω —Ñ–∞–π–ª—ä—Ç:", csvPath);
    return;
  }

  const csv = fs.readFileSync(csvPath, "utf8");
  const [headerLine, ...lines] = csv.trim().split("\n");
  const headers = headerLine.split(",");

  // üîç –ò–Ω—Ç–µ—Ä–µ—Å—É–≤–∞—â–∏ –Ω–∏ –∫–æ–ª–æ–Ω–∏
  const keepCols = ["Owner", "Email", "Username", "Password"];
  const indexes = keepCols
    .map((col) => headers.indexOf(col))
    .filter((i) => i >= 0);

  if (indexes.length === 0) {
    console.error("‚ö†Ô∏è –ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –Ω—É–∂–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏ –≤ CSV!");
    return;
  }

  const rows = lines.map((line) => line.split(","));

  const seen = new Set();
  const uniqueRows = [];
  for (const cols of rows) {
    const email = (cols[indexes[1]] || "").trim().toLowerCase(); // Email –∫–æ–ª–æ–Ω–∞—Ç–∞
    if (!seen.has(email) && email !== "") {
      seen.add(email);
      uniqueRows.push(cols);
    }
  }

  console.log(`üßæ –û–±—â–æ —Ä–µ–¥–æ–≤–µ –≤ CSV: ${rows.length}`);
  console.log(`‚ú® –£–Ω–∏–∫–∞–ª–Ω–∏ –∞–∫–∞—É–Ω—Ç–∏ –∑–∞ DOCX: ${uniqueRows.length}`);
  // üß± –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
  const tableRows = [
    new TableRow({
      children: keepCols.map(
        (h) =>
          new TableCell({
            children: [new Paragraph({ text: h, bold: true })],
          })
      ),
    }),
    ...uniqueRows.map(
      (cols) =>
        new TableRow({
          children: indexes.map(
            (i) =>
              new TableCell({
                children: [new Paragraph(cols[i] || "")],
              })
          ),
        })
    ),
  ];

  // üìÑ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const doc = new Document({
    sections: [
      {
        children: [
          new Paragraph({
            text: "üìã –î–∞–Ω–Ω–∏ –∑–∞ –∞–∫–∞—É–Ω—Ç–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–∏—Ü–∏ (—É–Ω–∏–∫–∞–ª–Ω–∏ –∑–∞–ø–∏—Å–∏)",
            bold: true,
            spacing: { after: 200 },
          }),
          new Table({ rows: tableRows }),
        ],
      },
    ],
  });

  const buffer = await Packer.toBuffer(doc);
  fs.writeFileSync("tools/import/output/users_preview.docx", buffer);
  console.log("‚úÖ DOC —Ñ–∞–π–ª —Å—ä–∑–¥–∞–¥–µ–Ω: tools/import/output/users_preview.docx");
}

exportDoc();
