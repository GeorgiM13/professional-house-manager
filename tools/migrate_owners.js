// üì¶ Edge Function: migrate-owners
// ‚úÖ –ü—Ä–µ—Ö–≤—ä—Ä–ª—è –Ω–µ–º–∏–≥—Ä–∏—Ä–∞–Ω–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–∏—Ü–∏ –æ—Ç owners_temp ‚Üí users + Supabase Auth

import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

const supabase = createClient(SUPABASE_URL, SERVICE_ROLE_KEY);

// üî† –£–º–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–¥–µ–ª—è–Ω–µ –Ω–∞ –∏–º–µ–Ω–∞
function splitName(fullName) {
  if (!fullName) {
    return { first_name: "", second_name: "", last_name: "" };
  }

  const parts = fullName.trim().split(/\s+/);

  if (parts.length === 1) {
    // –ï–¥–Ω–æ –∏–º–µ (–Ω–∞–ø—Ä. —Ñ–∏—Ä–º–∞)
    return { first_name: parts[0], second_name: "", last_name: "" };
  }

  if (parts.length === 2) {
    // –î–≤–µ –∏–º–µ–Ω–∞ (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)
    return { first_name: parts[0], second_name: "", last_name: parts[1] };
  }

  if (parts.length === 3) {
    // –¢—Ä–∏ –∏–º–µ–Ω–∞ (–ò–≤–∞–Ω –ì–µ–æ—Ä–≥–∏–µ–≤ –ò–≤–∞–Ω–æ–≤)
    return { first_name: parts[0], second_name: parts[1], last_name: parts[2] };
  }

  // –ü–æ–≤–µ—á–µ –æ—Ç 3 –¥—É–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ñ–∏—Ä–º–∞ —Å –∏–º–µ)
  return {
    first_name: parts[0],
    second_name: parts.slice(1, parts.length - 1).join(" "),
    last_name: parts[parts.length - 1],
  };
}

Deno.serve(async (req) => {
  try {
    // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø
    const authHeader = req.headers.get("authorization");
    const expected = `Bearer ${SERVICE_ROLE_KEY}`;
    if (authHeader !== expected) {
      return new Response(JSON.stringify({ error: "Unauthorized" }), {
        status: 401,
        headers: { "Content-Type": "application/json" },
      });
    }

    console.log("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–∏—Ü–∏...");

    // 1Ô∏è‚É£ –í–∑–µ–º–∞–º–µ –Ω–µ–º–∏–≥—Ä–∏—Ä–∞–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏
    const { data: owners, error: fetchError } = await supabase
      .from("owners_temp")
      .select("*")
      .eq("migrated", false);

    if (fetchError) throw new Error(fetchError.message);

    if (!owners || owners.length === 0) {
      return new Response(JSON.stringify({ message: "–ù—è–º–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –º–∏–≥—Ä–∞—Ü–∏—è." }), {
        headers: { "Content-Type": "application/json" },
      });
    }

    console.log(`üìã –ù–∞–º–µ—Ä–µ–Ω–∏ ${owners.length} —Å–æ–±—Å—Ç–≤–µ–Ω–∏–∫–∞ –∑–∞ –º–∏–≥—Ä–∞—Ü–∏—è`);

    const results = [];

    for (const owner of owners) {
      if (!owner.email) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–Ω–∞—Ç –∑–∞–ø–∏—Å –±–µ–∑ –∏–º–µ–π–ª: ${owner.name}`);
        continue;
      }

      // 2Ô∏è‚É£ –°—ä–∑–¥–∞–≤–∞–º–µ Auth –∞–∫–∞—É–Ω—Ç
      const tempPassword = Math.random().toString(36).slice(-8);
      const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
        email: owner.email,
        email_confirm: true,
        password: tempPassword,
        phone: owner.phone || null,
        user_metadata: {
          name: owner.name,
          building_id: owner.building_id,
          object_type: owner.object_type,
          object_number: owner.object_number,
        },
      });

      if (authError) {
        console.error(`‚ùå Auth –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ ${owner.email}: ${authError.message}`);
        continue;
      }

      console.log(`‚úÖ Auth –∞–∫–∞—É–Ω—Ç —Å—ä–∑–¥–∞–¥–µ–Ω –∑–∞ ${owner.email}`);

      // 3Ô∏è‚É£ –†–∞–∑–¥–µ–ª—è–º–µ –∏–º–µ—Ç–æ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ
      const { first_name, second_name, last_name } = splitName(owner.name);

      // 4Ô∏è‚É£ –î–æ–±–∞–≤—è–º–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ users
      const { error: userError } = await supabase.from("users").insert({
        id: authUser.user.id,
        first_name,
        second_name,
        last_name,
        email: owner.email,
        username: owner.email,
        phone: owner.phone,
        role: "user",
      });

      if (userError) {
        console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –≤ users: ${userError.message}`);
        continue;
      }

      // 5Ô∏è‚É£ –ú–∞—Ä–∫–∏—Ä–∞–º–µ –∫–∞—Ç–æ –º–∏–≥—Ä–∏—Ä–∞–Ω
      const { error: updateError } = await supabase
        .from("owners_temp")
        .update({ migrated: true })
        .eq("id", owner.id);

      if (updateError) {
        console.error(`‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ ${owner.email}: ${updateError.message}`);
      } else {
        console.log(`üü¢ ${owner.email} –µ –º–∏–≥—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      }

      results.push({
        email: owner.email,
        password: tempPassword,
        name: owner.name,
      });
    }

    // 6Ô∏è‚É£ –í—Ä—ä—â–∞–º–µ –æ–±–æ–±—â–µ–Ω–∏–µ
    return new Response(JSON.stringify({ success: true, created: results }), {
      headers: { "Content-Type": "application/json" },
    });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏—è—Ç–∞:", err.message);
    return new Response(JSON.stringify({ error: err.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
});
